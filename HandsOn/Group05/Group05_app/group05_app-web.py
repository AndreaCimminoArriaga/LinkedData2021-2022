# -*- coding: utf-8 -*-
"""App Web.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_sHQ4cvo9CdmZ1GaJDAw8Qq3yFt8JQtJ

## Instalamos los paquetes y cargamos el Grafo
"""

!pip install rdflib

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS

g = Graph()
g.parse('/group05_ontology.ttl', format='ttl')
g.parse('/output-with-links.ttl', format='ttl')

"""## Definimos los prefijos"""

companies = Namespace('http://www.semanticweb.org/alumno/ontologies/2021/10/Group05_ontology/Company/')
district = Namespace('http://www.semanticweb.org/alumno/ontologies/2021/10/Group05_ontology/District/')
rr = Namespace('http://www.w3.org/ns/r2rml#')
rml = Namespace('http://semweb.mmlab.be/ns/rml#')
ql = Namespace('http://semweb.mmlab.be/ns/ql#')
rdf = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
vcard = Namespace('http://www.w3.org/2006/vcard/ns#')
dbp = Namespace('http://dbpedia.org/property/')
geo = Namespace('http://www.w3.org/2003/01/geo/wgs84_pos#')
ids = Namespace('https://w3id.org/idsa/core/')
dbp = Namespace('http://dbpedia.org/ontology')
sor = Namespace('http://purl.org/net/soron/')
gndo = Namespace('http://d-nb.info/standards/elementset/gnd#')
arp = Namespace('http://www.arpenteur.org/ontology/Arpenteur.owl#')
frappe = Namespace('http://streamreasoning.org/ontologies/frappe#')
epower = Namespace('http://www.semanticweb.org/alumno/ontologies/2021/10/Group05_ontology#')
ns = Namespace('http://example.com/ns#')

"""## App interactiva"""

def app_web():
    print('1 para ver edificios y el numero total de ellos, además de la potencia según la empresa instaladora')
    print('2 para obtener todos los edificios y su potencia')
    print('3 para obtener los edificios y la empresa instaladora, según el distrito')

    q = int(input())
    if q == 1:
        return query_1()
    if q == 2:
        return query_2()
    if q == 3:
        return query_3()
    else:
        return 'Error'

from rdflib.plugins.sparql import prepareQuery

"""## Queries básicas para enseñar opciones a elegir disponibles"""

#QUERIES PARA ENSEÑAR OPCIONES A ELEGIR ENTRE EMPRESAS Y DISTRITOS
def query_base_company():
  empresas = []
  
  q_base = prepareQuery('''
    SELECT  
      ?company 
    WHERE  {
      ?company a epower:Company.
    }
  
  
    ''',
  initNs = {"epower":epower})

  for u in g.query(q_base):
    empresas.append(u)

  for _ in empresas:
    for x in _:
      for s,p,o in g.triples((None, vcard.hasName, None)):
        if x==s :
          print(o)
          

def query_base_distrito():
  distritos = []
  q_base_distrito = prepareQuery('''
    SELECT  
      ?district
    WHERE  {
      ?district a epower:District.
    }
  
  
    ''',
  initNs = {"epower":epower})
  
  for i in g.query(q_base_distrito):
    distritos.append(i)

  for _ in distritos:
    for x in _:
      for s,p,o in g.triples((None, vcard.hasName, None)):
        if x==s :
          print(o)

"""## Queries de la app """

#Edificios y potencia según empresa instaladora
def query_1():
  aux1 = []
  result = []
  q1 = prepareQuery('''
    SELECT  
      ?edificio ?power
    WHERE  {
      ?edificio soron:hires companies:AURA.
      ?edificio epower:power ?power
    }
  
  
    ''',
  initNs = {"soron": sor, "companies": companies, "epower":epower})
  
  
  
  for u in g.query(q1):
    result.append(u)

  print('Número de contratos: ', len(result))
  print('Edificios donde ha instalado la empresa: ', '\n')
  for i in result:
    for a in i:
      for s,p,o in g.triples((None, None, None)):
        if p==vcard.hasName and a==s:
          print('Edificio: ', o)

    for x in i:
      for s,p,o in g.triples((None, epower.power, None)):
        if x==s:
          print('Potencia: ', o, '\n')

#devuelve edificios y potencia
def query_2():
  result = []
  
  
 
  q2 = prepareQuery('''
    SELECT 
      ?building ?power
    WHERE  {
      ?building a epower:Building.
      ?building epower:power ?power.
      
    }
    
 
  
  
    ''',
    initNs = {"epower": epower})
  

  #FILTER (?power > 4) Error al devolver el valor de la potencia, no devuelve el valor nuemrico,
                    # por tanto no podemos aplicar filtros ni sumas.


  for u in g.query(q2):
    result.append(u)

  for i in result: 
    
    aux1=[]
    for a in i:
      for s,p,o in g.triples((None, None, None)):
        if p==vcard.hasName and a==s:
          aux1.append(o)
    
    aux2 = []
    for a in i:
      for s,p,o in g.triples((None, epower.power, None)):
        if a==s:
          aux2.append(o)


    result = list(zip(aux1,aux2))
    print(result)

#edificios en cada distrito y empresa instaladora
def query_3():

  result = []
  
  q3 = prepareQuery('''
    SELECT 
      ?building ?company
    WHERE  {
      ?building a epower:Building.
      ?building soron:hires ?company.
      ?building frappe:isIn ?street.
      ?street a epower:Street.
      ?street frappe:isIn district:Arganzuela.

      }
    



    ''',
    initNs = {"epower": epower, "frappe":frappe, "district":district, "dbp":dbp, "soron":sor})
  
  print('Edificios con energía fotovoltaica instalada en el distrito y su empresa instaladora')
  


  for u in g.query(q3):
    result.append(u)

  print('Total de edificios: ', len(result), '\n')
  
  


  for i in result:
    for a in i:
      for s,p,o in g.triples((None,None,None)):
        if a==s and p==vcard.hasName:
          print(o)

print('Esto es una app para obtener información acerca de edificios con energía fotovoltaica en la ciudad de Madrid')
print('Distritos de Madrid disponibles: ', '\n')
query_base_distrito()
print('\n', 'Empresas instaladoras disponibles:', '\n')
query_base_company()
print('\n')
app_web()
